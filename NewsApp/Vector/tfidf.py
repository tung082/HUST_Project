import numpy as np
import pandas as pd
from pymongo import MongoClient
from sklearn.pipeline import FeatureUnion, Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import TruncatedSVD
from sklearn.base import BaseEstimator, TransformerMixin
from bson.objectid import ObjectId

client = MongoClient("mongodb://localhost:27017/")
db = client.news_raw
collection = db.dantri
articles = list(collection.find({}, {"_id": 1, "title": 1, "content": 1, "author": 1}))  # Ch·ªâ l·∫•y c·ªôt c·∫ßn thi·∫øt

if not articles:
    print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong MongoDB!")
    exit()

df = pd.DataFrame(articles)

# üîπ Chuy·ªÉn ObjectId th√†nh string
df["_id"] = df["_id"].astype(str)

# üîπ X·ª≠ l√Ω gi√° tr·ªã None (n·∫øu c√≥)
df["title"] = df["title"].fillna("")
df["content"] = df["content"].fillna("")

# üîπ ColumnSelector ƒë·ªÉ ch·ªçn c·ªôt
class ColumnSelector(BaseEstimator, TransformerMixin):
    def __init__(self, column):
        self.column = column

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        return X[self.column].values.astype('U')

# üîπ T·∫°o pipeline TF-IDF
title_pipe = Pipeline([
    ('select_title', ColumnSelector('title')),
    ('tfidf_title', TfidfVectorizer())
])

content_pipe = Pipeline([
    ('select_content', ColumnSelector('content')),
    ('tfidf_content', TfidfVectorizer())
])

# üîπ H·ª£p nh·∫•t c√°c feature
feature_union = FeatureUnion(
    transformer_list=[
        ('title_pipe', title_pipe),
        ('content_pipe', content_pipe),
    ],
    transformer_weights={
        'title_pipe': 3.0,  # Title c√≥ tr·ªçng s·ªë cao h∆°n
        'content_pipe': 1.0,
    }
)

# üîπ T·∫°o ma tr·∫≠n TF-IDF (gi·ªØ d·∫°ng sparse)
X_sparse = feature_union.fit_transform(df)
print("‚úÖ ƒê√£ t√≠nh xong TF-IDF")

# üîπ Gi·∫£m s·ªë chi·ªÅu b·∫±ng TruncatedSVD
pca_dim = 384
svd = TruncatedSVD(n_components=pca_dim)
X_reduced = svd.fit_transform(X_sparse)

print(f"‚úÖ ƒê√£ gi·∫£m s·ªë chi·ªÅu xu·ªëng c√≤n {X_reduced.shape[1]}")

# üîπ L∆∞u v√†o MongoDB v·ªõi c·∫≠p nh·∫≠t n·∫øu t·ªìn t·∫°i
vector_collection = db.news_vector

for i, (_id, vec) in enumerate(zip(df["_id"], X_reduced)):
    try:
        object_id = ObjectId(_id)
        vector_collection.update_one(
            {"_id": object_id},  # ƒêi·ªÅu ki·ªán t√¨m ki·∫øm
            {"$set": {"vector_tfidf": vec.tolist()}},  # N·∫øu c√≥ th√¨ c·∫≠p nh·∫≠t
            upsert=True  # N·∫øu kh√¥ng c√≥ th√¨ ch√®n m·ªõi
        )
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t ObjectId {_id}: {e}")

print("‚úÖ TF-IDF vectors ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c ch√®n m·ªõi v√†o MongoDB!")
